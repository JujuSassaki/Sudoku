
import java.util.Scanner;

public class SudokuGame {
    private Tabuleiro tabuleiro;
    private ValidadorSudoku validador;
    private Scanner scanner;
    private boolean jogoAtivo;

    public SudokuGame() {
        this.tabuleiro = new Tabuleiro();
        this.validador = new ValidadorSudoku();
        this.scanner = new Scanner(System.in);
        this.jogoAtivo = true;
    }

    public void iniciarJogo() {
        System.out.println("=== BEM-VINDO AO SUDOKU ===");
        System.out.println("Instru√ß√µes:");
        System.out.println("- Digite linha (1-9), coluna (1-9) e n√∫mero (1-9)");
        System.out.println("- Digite 'quit' para sair");
        System.out.println("- Digite 'resolver' para resolver automaticamente");
        System.out.println("- Digite 'novo' para novo jogo");
        
        tabuleiro.gerarTabuleiroInicial();
        
        while (jogoAtivo) {
            tabuleiro.exibirTabuleiro();
            processarJogada();
            
            if (verificarVitoria()) {
                System.out.println("\nüéâ PARAB√âNS! VOC√ä VENCEU! üéâ");
                jogoAtivo = false;
            }
        }
        
        scanner.close();
    }

    private void processarJogada() {
        System.out.print("\nSua jogada (linha coluna n√∫mero) ou comando: ");
        String entrada = scanner.nextLine().trim();
        
        if (entrada.equalsIgnoreCase("quit")) {
            jogoAtivo = false;
            return;
        }
        
        if (entrada.equalsIgnoreCase("resolver")) {
            resolverAutomaticamente();
            return;
        }
        
        if (entrada.equalsIgnoreCase("novo")) {
            tabuleiro.gerarTabuleiroInicial();
            return;
        }
        
        try {
            String[] partes = entrada.split(" ");
            if (partes.length != 3) {
                System.out.println("‚ùå Formato inv√°lido! Use: linha coluna n√∫mero");
                return;
            }
            
            int linha = Integer.parseInt(partes[0]) - 1;
            int coluna = Integer.parseInt(partes[1]) - 1;
            int numero = Integer.parseInt(partes[2]);
            
            realizarJogada(linha, coluna, numero);
            
        } catch (NumberFormatException e) {
            System.out.println("‚ùå Por favor, digite apenas n√∫meros!");
        }
    }

    private void realizarJogada(int linha, int coluna, int numero) {
        if (!validarEntrada(linha, coluna, numero)) {
            return;
        }
        
        if (!tabuleiro.podeInserir(linha, coluna)) {
            System.out.println("‚ùå Esta c√©lula n√£o pode ser modificada!");
            return;
        }
        
        if (validador.jogadaValida(tabuleiro.getTabuleiro(), linha, coluna, numero)) {
            tabuleiro.inserirNumero(linha, coluna, numero);
            System.out.println("‚úÖ Jogada v√°lida!");
        } else {
            System.out.println("‚ùå Jogada inv√°lida! Este n√∫mero j√° existe na linha, coluna ou setor 3x3.");
        }
    }

    private boolean validarEntrada(int linha, int coluna, int numero) {
        if (linha < 0 || linha > 8 || coluna < 0 || coluna > 8) {
            System.out.println("‚ùå Linha e coluna devem estar entre 1 e 9!");
            return false;
        }
        
        if (numero < 1 || numero > 9) {
            System.out.println("‚ùå N√∫mero deve estar entre 1 e 9!");
            return false;
        }
        
        return true;
    }

    private void resolverAutomaticamente() {
        System.out.println("ü§ñ Resolvendo automaticamente...");
        Resolvedor resolvedor = new Resolvedor();
        
        if (resolvedor.resolver(tabuleiro.getTabuleiro())) {
            System.out.println("‚úÖ Sudoku resolvido!");
            tabuleiro.exibirTabuleiro();
        } else {
            System.out.println("‚ùå N√£o foi poss√≠vel resolver este Sudoku.");
        }
    }

    private boolean verificarVitoria() {
        return validador.sudokuCompleto(tabuleiro.getTabuleiro());
    }

    public static void main(String[] args) {
        new SudokuGame().iniciarJogo();
    }
}
